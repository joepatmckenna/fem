{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of threads: 32\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import fem, os, time, pickle\n",
    "data_dir = '../../../../data/words'\n",
    "print 'number of threads: %i' % (fem.fortran_module.fortran_module.num_threads(),)\n",
    "cache = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "word length: 10, number of words: 1000000\n"
     ]
    }
   ],
   "source": [
    "n, l = 10, int(1e6)\n",
    "words = np.loadtxt(os.path.join(data_dir, '%02i.txt' % (n,)), dtype='U%i' % (n,))\n",
    "words_sample = np.random.choice(words, size=l, replace=False)\n",
    "x = np.array([np.array(list(word)) for word in words_sample]).T\n",
    "print 'word length: %i, number of words: %i' % x.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_file = os.path.join(data_dir, '%02i.pkl' % (n,))\n",
    "if cache and os.path.exists(model_file):\n",
    "    with open(model_file, 'r') as f:\n",
    "        model = pickle.load(f)\n",
    "    print 'loaded cached model'\n",
    "else:\n",
    "    model = fem.discrete.fit.model()\n",
    "    start = time.time()\n",
    "    model.fit(x, overfit=False, svd='exact')\n",
    "    end = time.time()\n",
    "    print 'fit time: %.02f minutes' % ((end-start)/60.,)\n",
    "    with open(model_file, 'w') as f:\n",
    "        pickle.dump(model, f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(1, 2, figsize=(12,6))\n",
    "for di in model.d:\n",
    "    ax[0].plot(1+np.arange(len(di)), di, 'k-', lw=0.1)\n",
    "ax[0].set_xlabel('iteration')\n",
    "ax[0].set_ylabel('discrepancy')\n",
    "\n",
    "scale = np.abs(model.w[1]).max()\n",
    "ax[1].matshow(model.w[1], aspect='equal', cmap='seismic', vmin=-scale, vmax=scale)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "word = np.random.choice(words)\n",
    "pred, prob = model.predict(list(word))\n",
    "print word\n",
    "print word in words_sample\n",
    "print ''.join(pred)\n",
    "print prob"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
