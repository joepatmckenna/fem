{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulated mutations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of threads: 32\n"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import fem\n",
    "print 'number of threads: %i' % (fem.fortran_module.fortran_module.num_threads(),)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "n, m, degs = 16, 4, [1]\n",
    "par = fem.simulate.model_parameters(n, m, degs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYAAAAD8CAYAAAB+UHOxAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAEz9JREFUeJzt3X+w5XV93/HnK1BINKP82FvA3dUlydYOYWykWyRjk9hgEUxw+YNYqIkbu84OFWta0iGInTKaiRNtU6oTS7sB6tKxoKVJWS3RrEjGZgzgouuyQJQrUfduWLgIkjSYkG3e/eN80JPdu9y795w95+Ln+Zg5c7/fz/dzzvd1L8t93e/3nPM9qSokSf35vmkHkCRNhwUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOmUBSFKnLABJ6tSx0w7wXFatWlXr1q2bdgxJel659957H6+qmcXmregCWLduHTt37px2DEl6Xkny9aXM8xSQJHXKApCkTlkAktQpC0CSOmUBSFKnLABJ6pQFIEmdWrQAktyY5LEkexbY9stJKsmqtp4kH0wym2R3krOG5m5K8lC7bRrvtyFJOlJLOQL4MHD+wYNJ1gLnAd8YGr4AWN9uW4Dr2tyTgGuAVwFnA9ckOXGU4JKk0Sz6TuCq+mySdQtsuha4ErhtaGwjcFMNPmn+riQnJDkNeA2wo6qeAEiyg0Gp3DxSemmKrnnv+5nb//i0YxxizamrePfVV047hp4HlnUpiCQbgX1V9aUkw5tWA3uH1ufa2OHGF3rsLQyOHnjpS1+6nHjSRMztf5wzL3zrtGMcYs/Hr592BD1PHPGTwEleAFwN/Nvxx4Gq2lpVG6pqw8zMotcykiQt03JeBfTDwOnAl5J8DVgDfCHJqcA+YO3Q3DVt7HDjkqQpOeICqKr7qupvV9W6qlrH4HTOWVW1H9gOvLm9Gugc4KmqegT4FHBekhPbk7/ntTFJ0pQs5WWgNwN/CLw8yVySzc8x/XbgYWAW+C3gbQDtyd9fBT7fbu959glhSdJ0LOVVQJcusn3d0HIBlx9m3o3AjUeYT5J0lPhOYEnqlAUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOmUBSFKnLABJ6pQFIEmdsgAkqVMWgCR1ygKQpE5ZAJLUqWV9JrA0SSv1w9d33beHMy+cdgpp+SwArXgr9cPXP3fPZdOOII3EU0CS1CkLQJI6ZQFIUqcsAEnq1KIFkOTGJI8l2TM09u+S/FGS3Ul+J8kJQ9vemWQ2yZeTvG5o/Pw2NpvkqvF/K5KkI7GUI4APA+cfNLYDOLOqXgF8BXgnQJIzgEuAH233+U9JjklyDPAh4ALgDODSNleSNCWLFkBVfRZ44qCx36uqA231LmBNW94I3FJVf1lVfwzMAme322xVPVxVzwC3tLmSpCkZx3MA/wz43ba8Gtg7tG2ujR1uXJI0JSMVQJJ3AQeAj4wnDiTZkmRnkp3z8/PjelhJ0kGWXQBJfhH4WeBNVVVteB+wdmjamjZ2uPFDVNXWqtpQVRtmZmaWG0+StIhlFUCS84ErgTdU1dNDm7YDlyQ5PsnpwHrgHuDzwPokpyc5jsETxdtHiy5JGsWi1wJKcjPwGmBVkjngGgav+jke2JEE4K6quqyq7k/yMeABBqeGLq+q/9ce5+3Ap4BjgBur6v6j8P1IkpZo0QKoqksXGL7hOeb/GvBrC4zfDtx+ROkkSUeN7wSWpE5ZAJLUKQtAkjplAUhSpywASeqUBSBJnbIAJKlTFoAkdcoCkKROWQCS1CkLQJI6ZQFIUqcsAEnqlAUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOmUBSFKnFi2AJDcmeSzJnqGxk5LsSPJQ+3piG0+SDyaZTbI7yVlD99nU5j+UZNPR+XYkSUu1lCOADwPnHzR2FXBHVa0H7mjrABcA69ttC3AdDAoDuAZ4FXA2cM2zpSFJmo5FC6CqPgs8cdDwRmBbW94GXDQ0flMN3AWckOQ04HXAjqp6oqqeBHZwaKlIkiZouc8BnFJVj7Tl/cApbXk1sHdo3lwbO9y4JGlKRn4SuKoKqDFkASDJliQ7k+ycn58f18NKkg6y3AJ4tJ3aoX19rI3vA9YOzVvTxg43foiq2lpVG6pqw8zMzDLjSZIWs9wC2A48+0qeTcBtQ+Nvbq8GOgd4qp0q+hRwXpIT25O/57UxSdKUHLvYhCQ3A68BViWZY/Bqnl8HPpZkM/B14I1t+u3A64FZ4GngLQBV9USSXwU+3+a9p6oOfmJZkjRBixZAVV16mE3nLjC3gMsP8zg3AjceUTpJ0lHjO4ElqVMWgCR1ygKQpE5ZAJLUKQtAkjplAUhSpywASeqUBSBJnbIAJKlTFoAkdcoCkKROWQCS1CkLQJI6ZQFIUqcsAEnqlAUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOjVSAST5V0nuT7Inyc1Jvj/J6UnuTjKb5KNJjmtzj2/rs237unF8A5Kk5Vl2ASRZDbwD2FBVZwLHAJcA7wOuraofAZ4ENre7bAaebOPXtnmSpCkZ9RTQscAPJDkWeAHwCPDTwK1t+zbgora8sa3Ttp+bJCPuX5K0TMsugKraB/x74BsMfvE/BdwLfKuqDrRpc8Dqtrwa2Nvue6DNP/ngx02yJcnOJDvn5+eXG0+StIhRTgGdyOCv+tOBlwAvBM4fNVBVba2qDVW1YWZmZtSHkyQdxiingF4L/HFVzVfVXwG/DbwaOKGdEgJYA+xry/uAtQBt+4uBb46wf0nSCEYpgG8A5yR5QTuXfy7wAHAncHGbswm4rS1vb+u07Z+pqhph/5KkEYzyHMDdDJ7M/QJwX3usrcCvAFckmWVwjv+GdpcbgJPb+BXAVSPkliSN6NjFpxxeVV0DXHPQ8MPA2QvM/Qvg50bZnyRpfHwnsCR1ygKQpE5ZAJLUKQtAkjplAUhSpywASeqUBSBJnbIAJKlTFoAkdcoCkKROWQCS1CkLQJI6ZQFIUqcsAEnqlAUgSZ0a6fMAJK08X9y1i83vuHLaMQ6x5tRVvPvqlZerZxaA9D3m288c4MwL3zrtGIfY8/Hrpx1BB/EUkCR1ygKQpE5ZAJLUqZEKIMkJSW5N8kdJHkzy40lOSrIjyUPt64ltbpJ8MMlskt1JzhrPtyBJWo5RjwA+AHyyqv4u8PeAB4GrgDuqaj1wR1sHuABY325bgOtG3LckaQTLLoAkLwZ+ErgBoKqeqapvARuBbW3aNuCitrwRuKkG7gJOSHLaspNLkkYyyhHA6cA88F+TfDHJ9UleCJxSVY+0OfuBU9ryamDv0P3n2pgkaQpGKYBjgbOA66rqlcCf893TPQBUVQF1JA+aZEuSnUl2zs/PjxBPkvRcRimAOWCuqu5u67cyKIRHnz21074+1rbvA9YO3X9NG/sbqmprVW2oqg0zMzMjxJMkPZdlF0BV7Qf2Jnl5GzoXeADYDmxqY5uA29ryduDN7dVA5wBPDZ0qkiRN2KiXgvgXwEeSHAc8DLyFQal8LMlm4OvAG9vc24HXA7PA022uJGlKRiqAqtoFbFhg07kLzC3g8lH2J0kaH98JLEmdsgAkqVMWgCR1ygKQpE5ZAJLUKQtAkjplAUhSp/xMYH3HNe99P3P7H592jEPsum8PZ1447RTS9x4LQN8xt//xFflh4p+757JpR5C+J3kKSJI6ZQFIUqcsAEnqlAUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOmUBSFKnLABJ6tTIBZDkmCRfTPKJtn56kruTzCb5aJLj2vjxbX22bV836r4lScs3jiOAXwIeHFp/H3BtVf0I8CSwuY1vBp5s49e2eZKkKRmpAJKsAX4GuL6tB/hp4NY2ZRtwUVve2NZp289t8yVJUzDqEcB/BK4E/rqtnwx8q6oOtPU5YHVbXg3sBWjbn2rzJUlTsOwCSPKzwGNVde8Y85BkS5KdSXbOz8+P86ElSUNGOQJ4NfCGJF8DbmFw6ucDwAlJnv2gmTXAvra8D1gL0La/GPjmwQ9aVVurakNVbZiZmRkhniTpuSy7AKrqnVW1pqrWAZcAn6mqNwF3Ahe3aZuA29ry9rZO2/6Zqqrl7l+SNJqj8T6AXwGuSDLL4Bz/DW38BuDkNn4FcNVR2LckaYnG8pnAVfX7wO+35YeBsxeY8xfAz41jf5Kk0flOYEnqlAUgSZ2yACSpUxaAJHXKApCkTlkAktQpC0CSOmUBSFKnLABJ6pQFIEmdsgAkqVMWgCR1ygKQpE5ZAJLUKQtAkjplAUhSpywASeqUBSBJnbIAJKlTFoAkdcoCkKROLbsAkqxNcmeSB5Lcn+SX2vhJSXYkeah9PbGNJ8kHk8wm2Z3krHF9E5KkIzfKEcAB4Jer6gzgHODyJGcAVwF3VNV64I62DnABsL7dtgDXjbBvSdKIll0AVfVIVX2hLf8Z8CCwGtgIbGvTtgEXteWNwE01cBdwQpLTlp1ckjSSsTwHkGQd8ErgbuCUqnqkbdoPnNKWVwN7h+4218YOfqwtSXYm2Tk/Pz+OeJKkBYxcAEl+EPifwL+sqj8d3lZVBdSRPF5Vba2qDVW1YWZmZtR4kqTDGKkAkvwtBr/8P1JVv92GH3321E77+lgb3wesHbr7mjYmSZqCUV4FFOAG4MGq+g9Dm7YDm9ryJuC2ofE3t1cDnQM8NXSqSJI0YceOcN9XA78A3JdkVxu7Gvh14GNJNgNfB97Ytt0OvB6YBZ4G3jLCviVJI1p2AVTVHwA5zOZzF5hfwOXL3Z8kabx8J7AkdcoCkKROWQCS1CkLQJI6ZQFIUqcsAEnq1CjvA5CkJfvirl1sfseV045xiDWnruLdV6+8XJNgAUiaiG8/c4AzL3zrtGMcYs/Hr592hKnxFJAkdcojgCm45r3vZ27/49OOcYhd9+3hzAunnULSpFgAUzC3//EVeSj8uXsum3YESRPkKSBJ6pQFIEmdsgAkqVMWgCR1ygKQpE5ZAJLUKQtAkjplAUhSpywASerUxAsgyflJvpxkNslVk96/JGlgogWQ5BjgQ8AFwBnApUnOmGQGSdLApK8FdDYwW1UPAyS5BdgIPHA0duZF1yQtpufPKZh0AawG9g6tzwGvOlo786JrkhbT8+cUpKqO+k6+s7PkYuD8qnprW/8F4FVV9fahOVuALW315cCX2/IqYOX9OX8oc46XOcfLnOO1UnO+rKpmFps06SOAfcDaofU1bew7qmorsPXgOybZWVUbjm680ZlzvMw5XuYcr+dLzsOZ9KuAPg+sT3J6kuOAS4DtE84gSWLCRwBVdSDJ24FPAccAN1bV/ZPMIEkamPgnglXV7cDty7jrIaeFVihzjpc5x8uc4/V8ybmgiT4JLElaObwUhCR1asUWQJKTkuxI8lD7euJzzH1RkrkkvznJjG3fi+ZM8rIkX0iyK8n9SSb+RoAl5vyxJH/YMu5O8k9WYs4275NJvpXkExPM9pyXMUlyfJKPtu13J1k3qWwH5Vgs50+2f48H2kuzp2IJOa9I8kD7t3hHkpet0JyXJbmv/f/9B8+rqxtU1Yq8Ae8HrmrLVwHve465HwD+O/CbKzEncBxwfFv+QeBrwEtWYM6/A6xvyy8BHgFOWGk527ZzgQuBT0wo1zHAV4Efav89vwSccdCctwH/uS1fAnx0kj+7I8i5DngFcBNw8aQzHkHOfwS8oC3/8xX883zR0PIbgE9O42e6nNuKPQJgcImIbW15G3DRQpOS/H3gFOD3JpTrYIvmrKpnquov2+rxTOfIayk5v1JVD7XlPwEeAxZ9M8mYLem/e1XdAfzZpEIxdBmTqnoGePYyJsOGs98KnJskE8wIS8hZVV+rqt3AX08427Cl5Lyzqp5uq3cxeN/QpC0l558Orb4QeN48sbqSC+CUqnqkLe9n8Ev+b0jyfcBvAP96ksEOsmhOgCRrk+xmcCmM97VfsJO0pJzPSnI2g794vnq0gx3kiHJO0EKXMVl9uDlVdQB4Cjh5IukWyNAslHMlONKcm4HfPaqJFraknEkuT/JVBkew75hQtpFN/GWgw5J8Gjh1gU3vGl6pqkqyUKu+Dbi9quaO5h9aY8hJVe0FXpHkJcD/SnJrVT260nK2xzkN+G/Apqoa+1+J48qpPiT5eWAD8FPTznI4VfUh4ENJ/inwb4BNU460JFMtgKp67eG2JXk0yWlV9Uj7hfTYAtN+HPiJJG9jcG79uCT/t6rG+jkDY8g5/Fh/kmQP8BMMThOsqJxJXgT8b+BdVXXXOPONM+cULHoZk6E5c0mOBV4MfHMy8Q7J8KyFcq4ES8qZ5LUM/jD4qaHTqJN0pD/PW4DrjmqiMVrJp4C2890W3QTcdvCEqnpTVb20qtYxOA1007h/+S/BojmTrEnyA235ROAf8t2L3E3KUnIeB/wOg5/jWMvpCCyac0qWchmT4ewXA5+p9szgBD1fLreyaM4krwT+C/CGqprWHwJLybl+aPVngIcmmG80034W+nA3BudO72Dww/w0cFIb3wBcv8D8X2Q6rwJaNCfwj4HdDF5BsBvYskJz/jzwV8CuoduPrbScbf3/APPAtxmcl33dBLK9HvgKg+dF3tXG3sPgFxTA9wP/A5gF7gF+aNL/nZeY8x+0n9mfMzhCuX+F5vw08OjQv8XtKzTnB4D7W8Y7gR+dRs7l3HwnsCR1aiWfApIkHUUWgCR1ygKQpE5ZAJLUKQtAkjplAUhSpywASeqUBSBJnfr/fkDO6hsYoEAAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7feb2c057250>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "par_flat = np.hstack([p for p in par.itervalues()]).flatten()\n",
    "tmp = plt.hist(par_flat, bins=int(np.sqrt(m*n)), ec='k', alpha=0.5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x, y = fem.simulate.mutations(par, n, m, o=4.0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "par_fit, disc = fem.fit.fit(x, y, degs, iters=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "par_fit_flat = np.hstack([p for p in par_fit.itervalues()]).flatten()\n",
    "\n",
    "fig = plt.figure(figsize=(4,4))\n",
    "ax = plt.gca()\n",
    "\n",
    "ax.scatter(par_flat, par_fit_flat, c='k', s=0.1)\n",
    "lo, hi = par_flat.min(), par_flat.max()\n",
    "grid = np.linspace(lo, hi)\n",
    "ax.plot(grid, grid, 'r--')\n",
    "ax.set_xlabel('true parameters')\n",
    "ax.set_ylabel('inferred parameters')\n",
    "    \n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
