{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import fem\n",
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import patches, colors\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.spatial import distance_matrix\n",
    "import sys, os, time, Bio.PDB, warnings, nglview\n",
    "from Bio import BiopythonWarning\n",
    "warnings.simplefilter('ignore', BiopythonWarning)\n",
    "data_dir = '../../../../data/msa'\n",
    "sys.path.append(data_dir)\n",
    "from parse_pfam import parse_pfam"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total MSAs: 16479, total PDB refs: 207746\n"
     ]
    }
   ],
   "source": [
    "pfam, pdb_refs = parse_pfam(data_dir)\n",
    "print 'total MSAs: %i, total PDB refs: %i' % (pfam.shape[0], pdb_refs.shape[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Subset the Pfam table `pfam` to contain only the families that contain at least one sequence with a reference to a PDB structure."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pfam = pfam[pfam.index.isin(pdb_refs.index)]\n",
    "print 'MSAs with PDB refs: %i' % (pfam.shape[0],)\n",
    "pfam['size'] = pfam['res']*pfam['seq']\n",
    "pfam.sort_values(by='size', inplace=True)\n",
    "pfam.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pdb_refs['res'] = pdb_refs['pdb_end'] - pdb_refs['pdb_start'] + 1\n",
    "pdb_refs.sort_values(by='res', ascending=False, inplace=True)\n",
    "pdb_refs.head()\n",
    "# random family\n",
    "ac = pfam.sample().index[0]\n",
    "fam = pfam.loc[ac]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def direct_information(fam, cache=True):\n",
    "    \n",
    "    fam_dir = os.path.join(data_dir, 'Pfam-A.full', fam.name)\n",
    "    direct_info_file = os.path.join(fam_dir, 'direct_info.npy')\n",
    "\n",
    "    if cache and os.path.exists(direct_info_file):\n",
    "        return np.load(direct_info_file)\n",
    "\n",
    "    msa = np.load(os.path.join(fam_dir, 'msa.npy'))\n",
    "    \n",
    "    aa = np.array([np.unique(s) for s in msa])\n",
    "    one_aa = np.array([len(a) == 1 for a in aa])\n",
    "    two_aa = np.array([len(a) == 2 for a in aa])\n",
    "    missing_aa_res = np.array(['-' in a for a in aa])\n",
    "    conserved_residues = one_aa | (two_aa & missing_aa_res)\n",
    " \n",
    "    m = np.array([len(a) for a in aa])\n",
    "    m = m[~conserved_residues]\n",
    "    n_residues = m.shape[0]\n",
    "    mm = np.insert(m.cumsum(), 0, 0)\n",
    "    w_idx = np.vstack((mm[:-1], mm[1:])).T\n",
    "\n",
    "    w_file = os.path.join(fam_dir, 'w.npy')\n",
    "    d_file = os.path.join(fam_dir, 'd.npy')\n",
    "    if cache and os.path.exists(w_file) and os.path.exists(d_file):\n",
    "        w = np.load(w_file)\n",
    "        d = np.load(d_file)\n",
    "    else:\n",
    "        start = time.time()\n",
    "        w, d = fem.discrete.fit.fit(msa[~conserved_residues], iters=10)\n",
    "        end = time.time()\n",
    "        print 'fit time: %.02f sec' % (end-start,)\n",
    "        w = np.hstack(w.values())\n",
    "        np.save(w_file, w)\n",
    "        np.save(d_file, d)\n",
    "    \n",
    "    direct_info = np.zeros((n_residues, n_residues))\n",
    "    for i, ii in enumerate(w_idx):\n",
    "        for j, jj in enumerate(w_idx):\n",
    "            p = np.exp(w[ii[0]:ii[1], jj[0]:jj[1]])\n",
    "            pi, pj = p.sum(axis=1), p.sum(axis=0)\n",
    "            p /= p.sum()\n",
    "            pi /= pi.sum()\n",
    "            pj /= pj.sum()\n",
    "            direct_info[i,j] = (p*np.log(p/np.outer(pi, pj))).sum()\n",
    "        \n",
    "    np.save(direct_info_file, direct_info)\n",
    "    return direct_info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def contact_map(ref, dist_thresh=8):\n",
    "    fam_dir = os.path.join(data_dir, 'Pfam-A.full', fam.name)\n",
    "    msa = np.load(os.path.join(fam_dir, 'msa.npy'))\n",
    "    aa = np.array([np.unique(s) for s in msa])\n",
    "    one_aa = np.array([len(a) == 1 for a in aa])\n",
    "    two_aa = np.array([len(a) == 2 for a in aa])\n",
    "    missing_aa_res = np.array(['-' in a for a in aa])\n",
    "    conserved_residues = one_aa | (two_aa & missing_aa_res)\n",
    "    seq = msa[:, ref.seq]\n",
    "    missing_aa_seq = seq == '-'\n",
    "\n",
    "    pdb_list = Bio.PDB.PDBList()\n",
    "    pdb_parser = Bio.PDB.PDBParser()\n",
    "    pdb_dir = os.path.join(data_dir, 'Pfam-A.full', ref.name)\n",
    "    pdb_file = pdb_list.retrieve_pdb_file(ref.pdb_id, pdir=pdb_dir, file_format='pdb')\n",
    "    chain = pdb_parser.get_structure(ref.pdb_id, pdb_file)[0][ref.chain]\n",
    "    coords = np.array([a.get_coord() for a in chain.get_atoms()])\n",
    "    coords = coords[ref.pdb_start-1:ref.pdb_end]\n",
    "\n",
    "    coords = coords[~conserved_residues[~missing_aa_seq]]\n",
    "    return distance_matrix(coords, coords) < dist_thresh\n",
    "\n",
    "def predict_contacts(ref, direct_info, top, k=1):\n",
    "    fam_dir = os.path.join(data_dir, 'Pfam-A.full', fam.name)\n",
    "    msa = np.load(os.path.join(fam_dir, 'msa.npy'))\n",
    "    aa = np.array([np.unique(s) for s in msa])\n",
    "    one_aa = np.array([len(a) == 1 for a in aa])\n",
    "    two_aa = np.array([len(a) == 2 for a in aa])\n",
    "    missing_aa_res = np.array(['-' in a for a in aa])\n",
    "    conserved_residues = one_aa | (two_aa & missing_aa_res)\n",
    "\n",
    "    seq = msa[:, ref.seq]\n",
    "    missing_aa_seq = seq == '-'\n",
    "    di_idx = np.arange((~conserved_residues).sum())\n",
    "    di_idx = di_idx[~missing_aa_seq[~conserved_residues]]\n",
    "    di = direct_info[np.ix_(di_idx, di_idx)]\n",
    "    mask = np.triu(np.ones(di.shape[0], dtype=bool), k=k)\n",
    "    thresh = np.sort(np.abs(di)[mask])[-top]\n",
    "    di[~mask] = 0\n",
    "    predicted_contacts = np.where(di >= thresh)\n",
    "    return predicted_contacts\n",
    "\n",
    "def roc(x, c):\n",
    "    mask = np.triu(np.ones(di.shape[0], dtype=bool), k=5)\n",
    "    order = x[mask].argsort()[::-1]\n",
    "    c_flat = c[mask][order]\n",
    "    tp = np.cumsum(c_flat, dtype=float)\n",
    "    fp = np.cumsum(~c_flat, dtype=float)\n",
    "    tp /= tp[-1]\n",
    "    fp /= fp[-1]\n",
    "    return fp, tp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "auc = []\n",
    "\n",
    "for i in range(100, len(pfam)):\n",
    "\n",
    "    fam = pfam.iloc[i]\n",
    "\n",
    "    start = time.time()\n",
    "    direct_info = direct_information(fam, cache=False)\n",
    "    end = time.time()\n",
    "\n",
    "    fam_dir = os.path.join(data_dir, 'Pfam-A.full', fam.name)\n",
    "    msa = np.load(os.path.join(fam_dir, 'msa.npy'))\n",
    "    aa = np.array([np.unique(s) for s in msa])\n",
    "    one_aa = np.array([len(a) == 1 for a in aa])\n",
    "    two_aa = np.array([len(a) == 2 for a in aa])\n",
    "    missing_aa_res = np.array(['-' in a for a in aa])\n",
    "    conserved_residues = one_aa | (two_aa & missing_aa_res)    \n",
    "\n",
    "    refs = pdb_refs[pdb_refs.index.str.contains(fam.name)]\n",
    "    \n",
    "    ref_auc = []\n",
    "    for j in range(refs.shape[0]):\n",
    "        ref = refs.iloc[j]\n",
    "        seq = msa[:, ref.seq]\n",
    "        missing_aa_seq = seq == '-'\n",
    "        di_idx = np.arange((~conserved_residues).sum())\n",
    "        di_idx = di_idx[~missing_aa_seq[~conserved_residues]]\n",
    "        di = direct_info[np.ix_(di_idx, di_idx)]\n",
    "        contacts = contact_map(ref)\n",
    "        fp, tp = roc(di, contacts)\n",
    "        ref_auc.append([ref.name, tp.sum() / tp.shape[0]])\n",
    "\n",
    "    ref_auc = np.arrayref_(auc)\n",
    "    max_auc = ref_auc[:,1].max()\n",
    "    np.save(os.path.join(fam_dir, 'auc.npy'), ref_auc)\n",
    "    \n",
    "    auc.append([fam.ac, max_auc, end-start])\n",
    "    print i ,len(pfam), auc[-1]\n",
    "    \n",
    "np.save(os.path.join(data_dir, 'Pfam-A.full', 'auc.npy'), auc)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# w_file = os.path.join(fam_dir, 'w.npy')\n",
    "# d_file = os.path.join(fam_dir, 'd.npy')\n",
    "# direct_info_file = os.path.join(fam_dir, 'direct_info.npy')\n",
    "# w = np.load(w_file)\n",
    "# d = np.load(d_file)\n",
    "# direct_info = np.load(direct_info_file)\n",
    "\n",
    "# seq_int = msa_int[:, ref.seq]\n",
    "# seq_int = seq_int[~conserved_residues]\n",
    "# w_idx = mm[:-1] + seq_int\n",
    "# w_idx = w_idx[~missing_aa_seq[~conserved_residues]]\n",
    "# w_seq = w[np.ix_(w_idx, w_idx)]\n",
    "\n",
    "# fig, ax = plt.subplots(1, 1, figsize=(6, 6))\n",
    "# scale = 1e-1 * np.abs(w_seq).max()\n",
    "# ax.matshow(w_seq, cmap=plt.cm.seismic, vmin=-scale, vmax=scale)\n",
    "# ax.axis('off')\n",
    "# ax.set_title('PDB: %s, chain %s, residues %i-%i' % (ref.pdb_id, ref.chain, ref.pdb_start, ref.pdb_end))\n",
    "# plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
